import os
import random
import string
from tinytag import TinyTag, TinyTagException
import telebot
import sys
import json
import shutil
from PyQt5.QtCore import Qt, QSize, QThread, pyqtSignal
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout

from qframelesswindow import AcrylicWindow, StandardTitleBar
from qfluentwidgets import PrimaryPushButton, TitleLabel, BodyLabel, ComboBox, SubtitleLabel, CheckBox, HorizontalFlipView, HorizontalPipsPager, AvatarWidget, ImageLabel, CaptionLabel, StrongBodyLabel, ToolButton, FluentIcon, MessageBoxBase, LineEdit

CONFIGS_DIR = 'configs'
TEMP_DIR = 'temp'
CONFIG_EXTENSION = '.cfg'
SINGLE_FILE_SUFFIX = '_single'
MULTIPLE_FILES_SUFFIX = '_multiple'

extracted_metadata = {}
image_paths = []
content_comboboxes = []

def clear_temp_folder():
    # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–æ—á–∫–∏ ^_^
    if os.path.exists(TEMP_DIR):  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–æ—á–∫–∞
        try:
            shutil.rmtree(TEMP_DIR)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ temp: {e}")

class TelegramWorker(QThread):
    # —Ç–æ–ª—å–∫–æ –Ω–µ –ø–æ–¥–≤–∏—Å–∞–π
    message_sent = pyqtSignal(str, str)

    def __init__(self, token, channel_id, message_text, photo_path=None):
        super().__init__()
        self.token = token
        self.channel_id = channel_id
        self.message_text = message_text
        self.photo_path = photo_path

    def run(self):
        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –≤ –∫–∞–Ω–∞–ª
        bot = telebot.TeleBot(self.token)
        try:
            if self.photo_path:
                with open(self.photo_path, 'rb') as photo:
                    bot.send_photo(self.channel_id, photo, caption=self.message_text, timeout=5)
                self.message_sent.emit("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", "green")
            else:
                bot.send_message(self.channel_id, self.message_text, timeout=5)
                self.message_sent.emit("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", "green")
        except Exception as e:
            self.message_sent.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", "red")


def extract_mdata(file_paths):
    # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –æ–±–ª–æ–∂–∫–∞
    global extracted_metadata, image_paths

    extracted_metadata.clear()
    image_paths.clear()

    if not isinstance(file_paths, list):
        file_paths = [file_paths]

    supported_files_found = False

    for file_path in file_paths:
        dir_name = ''.join(random.choices(string.ascii_uppercase + string.digits, k=15))
        dir_path = os.path.join(TEMP_DIR, dir_name)
        os.makedirs(dir_path, exist_ok=True)

        try:
            tag = TinyTag.get(file_path, image=True)
            supported_files_found = True

            metadata = {
                '–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ': "",
                '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞': tag.title,
                '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞': tag.album,
                '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç—Ä–µ–∫–∞': tag.artist,
                '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–ª—å–±–æ–º–∞': tag.albumartist,
                '–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä': tag.composer,
                '–ñ–∞–Ω—Ä': tag.genre,
                '–ë–∏—Ç—Ä–µ–π—Ç': f"{round(tag.bitrate)} kBits/s" if tag.bitrate else "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                '–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏': f"{tag.samplerate} Hz" if tag.samplerate else "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                '–ö–∞–Ω–∞–ª—ã': tag.channels,
                '–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞': tag.track,
                '–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤': tag.track_total,
                '–î–∏—Å–∫': tag.disc,
                '–í—Å–µ–≥–æ –¥–∏—Å–∫–æ–≤': tag.disc_total,
                '–î–∞—Ç–∞': tag.year,
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': tag.comment,
            }

            for key, value in metadata.items():
                extracted_metadata.setdefault(key, []).append(value)

            if tag.get_image():
                cover_data = tag.get_image()
                file_name = os.path.splitext(os.path.basename(file_path))[0]
                cover_path = os.path.join(dir_path, f'{file_name}.png')
                with open(cover_path, 'wb') as f:
                    f.write(cover_data)
                image_paths.append(cover_path)

        except TinyTagException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    return supported_files_found


def create_content_combobox(index):
    # –∫–æ–º–±–æ–±–æ–∫—Å—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    combo_pub = QHBoxLayout()

    checkBox = CheckBox()
    combo_pub.addWidget(checkBox)

    emoji_combo = ComboBox()
    emoji_list = ['', 'üéµ', 'üé∂', 'üíΩ', 'üíø', 'üìÄ', 'üë§', 'üë•', 'üìÖ', '¬©Ô∏è', '¬ÆÔ∏è']
    emoji_combo.addItems(emoji_list)
    emoji_combo.setFixedWidth(70)
    combo_pub.addWidget(emoji_combo)

    text_edit = LineEdit()
    text_edit.setMaxLength(50)
    combo_pub.addWidget(text_edit)

    from_file = ComboBox()
    from_file.setFixedWidth(180) # 150 - –Ω–µ–ø–ª–æ—Ö–æ
#    from_file.setMinimumWidth(180)
    combo_pub.addWidget(from_file)

    return combo_pub


def update_content_comboboxes():
    # —Å–ø–∏—Å–∫–∏ –∫–ª—é—á–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ from_file
    global content_comboboxes

    for combo_pub in content_comboboxes:
        from_file_combo = combo_pub.itemAt(3).widget()
        from_file_combo.clear()

    if extracted_metadata:
        # —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 1/–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        if len(extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) > 1:
            keys_to_add = ['–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ', '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–ª—å–±–æ–º–∞', '–í—Å–µ–≥–æ –¥–∏—Å–∫–æ–≤', '–î–∞—Ç–∞', '–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤']
        else:
            keys_to_add = ['–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ','–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç—Ä–µ–∫–∞', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–ª—å–±–æ–º–∞', '–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä', '–ñ–∞–Ω—Ä',
                '–ë–∏—Ç—Ä–µ–π—Ç', '–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏', '–ö–∞–Ω–∞–ª—ã', '–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞', '–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤', '–î–∏—Å–∫', '–í—Å–µ–≥–æ –¥–∏—Å–∫–æ–≤', '–î–∞—Ç–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ from_file (–ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π –ù–ï –º–µ–Ω—è—Ç—å)
        for key in keys_to_add:
            if key in extracted_metadata:
                for combo_pub in content_comboboxes:
                    from_file_combo = combo_pub.itemAt(3).widget()
                    from_file_combo.addItem(key)


def update_message_container():
    # –∫–∞–∫ —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ message_label
    message_text = ""
    current_index = window.flipView.currentIndex()

    for combo_pub in content_comboboxes:
        checkbox = combo_pub.itemAt(0).widget()
        if checkbox.isChecked():
            emoji_combo = combo_pub.itemAt(1).widget()
            emoji = emoji_combo.currentText()

            text_edit = combo_pub.itemAt(2).widget()
            text = text_edit.text()

            from_file_combo = combo_pub.itemAt(3).widget()
            metadata_key = from_file_combo.currentText()

            metadata_value = ""
            if metadata_key in extracted_metadata:
                metadata_values = extracted_metadata[metadata_key]
                if len(metadata_values) > current_index:
                    metadata_value = metadata_values[current_index]
                    if metadata_value is None: metadata_value = "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

            message_text += f"\n{emoji} {text} {metadata_value}"
            

    message_label.setText(message_text.strip())
#    message_label.


def save_config(config_name):
    # !!!–ù–ï –ó–ê–ë–´–¢–¨ –û–ë–ù–û–í–ò–¢–¨ –í–ï–†–°–ò–Æ –ö–û–ù–§–ò–ì–ê
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ 1/–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    file_type_suffix = SINGLE_FILE_SUFFIX if len(extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) == 1 else MULTIPLE_FILES_SUFFIX
    config_path = os.path.join(CONFIGS_DIR, config_name + file_type_suffix + CONFIG_EXTENSION)

    config_data = {
        'test_version': '1.6_empty_first_one',
        'api_token': window.api_token_edit.text(),
        'group_id': window.group_edit.text(),
        'content': []
    }

    for combo_pub in content_comboboxes:
        emoji_index = combo_pub.itemAt(1).widget().currentIndex()
        text = combo_pub.itemAt(2).widget().text()
        from_file_index = combo_pub.itemAt(3).widget().currentIndex()
        config_data['content'].append({
            'emoji_index': emoji_index,
            'text': text,
            'from_file_index': from_file_index
        })

    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=4)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {config_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def load_config(config_name):
    # –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ (1/–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
    file_type_suffix = SINGLE_FILE_SUFFIX if len(extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) == 1 else MULTIPLE_FILES_SUFFIX
    config_path = os.path.join(CONFIGS_DIR, config_name + file_type_suffix + CONFIG_EXTENSION)

    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config_data = json.load(f)

        window.api_token_edit.setText(config_data.get('api_token', ''))
        window.group_edit.setText(config_data.get('group_id', ''))

        for i, content_data in enumerate(config_data.get('content', [])):
            if i < len(content_comboboxes):
                combo_pub = content_comboboxes[i]
                combo_pub.itemAt(1).widget().setCurrentIndex(content_data.get('emoji_index', 0))
                combo_pub.itemAt(2).widget().setText(content_data.get('text', ''))
                combo_pub.itemAt(3).widget().setCurrentIndex(content_data.get('from_file_index', 0))
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {config_path}")

    except FileNotFoundError:
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")


class SaveConfigDialog(MessageBoxBase):
    # –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        self.titleLabel = SubtitleLabel("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        self.nameLineEdit = LineEdit()
        self.nameLineEdit.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        self.viewLayout.addWidget(self.titleLabel)
        self.viewLayout.addWidget(self.nameLineEdit)
        self.widget.setMinimumWidth(350)

        self.yesButton.setText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancelButton.setText("–û—Ç–º–µ–Ω–∞")


class Window(AcrylicWindow):
    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.resize(1200, 800)
        self.setTitleBar(StandardTitleBar(self))
        self.setWindowIcon(QIcon("logo.ico"))
        self.setWindowTitle("perper")
        self.setAcceptDrops(True)
        self.windowEffect.setMicaEffect(self.winId(), False)  # !!!—É–±—Ä–∞—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Win10!!! # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å - —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        #self.windowEffect.addShadowEffect(self.winId())        # windows10 - 1
        #self.windowEffect.removeBackgroundEffect(self.winId()) # windows10 - 2
        self.interface_created = False

        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)
        self.main_layout.addSpacing(self.titleBar.height())

        icon = FluentIcon.DOWNLOAD.icon()
        pixmap = icon.pixmap(icon.actualSize(QSize(64, 64)))  # –ü–û–ß–ï–ú–£ –ù–ê–ü–†–Ø–ú–£–Æ –ù–ï–õ–¨–ó–Ø –ü–ï–†–ï–î–ê–¢–¨
        self.icon_label = ImageLabel(pixmap)
        self.icon_label.setFixedSize(64, 64)
        self.main_layout.addWidget(self.icon_label, alignment=Qt.AlignCenter | Qt.AlignBottom)

        self.drop_label = TitleLabel("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        self.main_layout.addWidget(self.drop_label, alignment=Qt.AlignCenter | Qt.AlignBottom)

        self.drop_subtext = BodyLabel("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤: mp3, ogg, m4a, flac, opus, wma –∏ wave")
        self.main_layout.addWidget(self.drop_subtext, alignment=Qt.AlignCenter | Qt.AlignTop)

        clear_temp_folder()

    def create_main_interface(self):
        # –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.drop_label.hide()
        self.drop_subtext.hide()
        self.icon_label.hide()

        containers_main = QHBoxLayout()
        self.main_layout.addLayout(containers_main)

        preview_main = QWidget(self)
        containers_main.addWidget(preview_main)

        settings_main = QWidget(self)
        settings_main.setStyleSheet("background-color:white; border-radius:8px;")
        containers_main.addWidget(settings_main)

        # --- preview_main ---
        preview_layout = QHBoxLayout()
        preview_main.setLayout(preview_layout)

        self.avatar_widget = AvatarWidget("avatar.png")
        self.avatar_widget.setRadius(24)
        preview_layout.addWidget(self.avatar_widget, alignment=Qt.AlignBottom)
        preview_layout.addSpacing(10)

        # --- message_container ---
        global message_container
        message_container = QWidget(self)
        message_container.setStyleSheet("background-color:white; border-radius:24px; border-bottom-left-radius: 4px")
        message_container.setMinimumHeight(50)
        message_container.setMaximumHeight(900)
        message_container.setFixedWidth(400)
        preview_layout.addWidget(message_container, alignment=Qt.AlignBottom)
        preview_layout.addStretch()

        global message_layout
        message_layout = QVBoxLayout()
        message_container.setLayout(message_layout)

        # --- album_art ---
        global album_art
        album_art = ImageLabel()
        album_art.setBorderRadius(16, 16, 16, 16)
        album_art.scaledToWidth(message_container.width() - 18)
        message_layout.addWidget(album_art, alignment=Qt.AlignTop)

        # --- message_label ---
        global message_label
        message_label = BodyLabel("")
        message_label.setWordWrap(True)
        message_layout.addWidget(message_label, alignment=Qt.AlignTop)

        # --- settings_main ---
        settings_layout = QVBoxLayout()
        settings_main.setLayout(settings_layout)
        settings_layout.setContentsMargins(20, 20, 20, 20)

        settings_title = TitleLabel("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        settings_layout.addWidget(settings_title)
        settings_layout.addSpacing(10)

        # --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
        setting_publish_title = SubtitleLabel("–ë–æ—Ç")
        settings_layout.addWidget(setting_publish_title)

        combo_bot = QHBoxLayout()
        settings_layout.addLayout(combo_bot)
        combo_bot.addSpacing(20)

        api_token_label = BodyLabel("API Token")
        combo_bot.addWidget(api_token_label)
        self.api_token_edit = LineEdit()
        combo_bot.addWidget(self.api_token_edit)
        combo_bot.addSpacing(20)

        self.bublish_label = BodyLabel("–ú–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        combo_bot.addWidget(self.bublish_label)
        self.group_edit = LineEdit()
        self.group_edit.setText("@")
        combo_bot.addWidget(self.group_edit)
        settings_layout.addSpacing(10)

        # --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ---
        setting_publish_title = SubtitleLabel("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        settings_layout.addWidget(setting_publish_title)

        # --- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
        config_layout = QHBoxLayout()
        settings_layout.addLayout(config_layout)
        config_layout.addSpacing(20)

        config_load_label = StrongBodyLabel("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")
        config_layout.addWidget(config_load_label)

        self.config_combobox = ComboBox()
        self.config_combobox.currentIndexChanged.connect(self.load_selected_config)
        config_layout.addWidget(self.config_combobox)

        config_save = ToolButton(FluentIcon.SAVE)
        config_save.clicked.connect(self.save_current_config)
        config_layout.addWidget(config_save)

        config_delete = ToolButton(FluentIcon.DELETE)
        config_delete.clicked.connect(self.delete_selected_config)
        config_layout.addWidget(config_delete)

        # --- –∫–æ–º–±–æ–±–æ–∫—Å—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ---
        global content_comboboxes
        for i in range(8):
            content_combobox = create_content_combobox(i)
            content_comboboxes.append(content_combobox)
            settings_layout.addLayout(content_combobox)

        # --- —Ç–µ–∫—Å—Ç –æ FlipView –∏ Pager ---
        self.choose_cover_label = SubtitleLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É")
        settings_layout.addWidget(self.choose_cover_label)

        self.current_file_label = CaptionLabel("–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        self.current_file_label.setWordWrap(True)
        settings_layout.addWidget(self.current_file_label)

        # --- –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è FlipView –∏ Pager ---
        self.flipView_container = QWidget()
        self.flipView_container.setFixedHeight(140)
        self.flipView_layout = QVBoxLayout()
        self.flipView_container.setLayout(self.flipView_layout)

        self.flipView = HorizontalFlipView()
        self.flipView.setAspectRatioMode(Qt.AspectRatioMode.KeepAspectRatio)
        self.flipView.setItemSize(QSize(320, 100))
        self.flipView.setFixedHeight(100)
        self.flipView.setSpacing(10)
        self.flipView.setBorderRadius(10)
        self.flipView.currentIndexChanged.connect(self.update_album_art)
        self.flipView_layout.addWidget(self.flipView)

        self.pager = HorizontalPipsPager()
        self.pager.currentIndexChanged.connect(self.flipView.setCurrentIndex)
        self.flipView.currentIndexChanged.connect(self.pager.setCurrentIndex)
        self.flipView_layout.addWidget(self.pager, alignment=Qt.AlignCenter)
        settings_layout.addWidget(self.flipView_container)

        # --- –Ω–∏:–ó ---
        settings_layout.addStretch()
        self.log_text = CaptionLabel("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ª–æ–≥–∏")
        self.log_text.setWordWrap(True)
        settings_layout.addWidget(self.log_text)

        button_send_to = PrimaryPushButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
        button_send_to.clicked.connect(self.send_message_to_channel)
        settings_layout.addWidget(button_send_to, alignment=Qt.AlignRight)

        containers_main.setStretchFactor(preview_main, 1)
        containers_main.setStretchFactor(settings_main, 2)

        # —Å–∏–≥–Ω–∞–ª—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (!!–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        for i, combo_pub in enumerate(content_comboboxes):
            checkBox = combo_pub.itemAt(0).widget()
            emoji_combo = combo_pub.itemAt(1).widget()
            text = combo_pub.itemAt(2).widget()
            from_file = combo_pub.itemAt(3).widget()
            checkBox.stateChanged.connect(update_message_container)
            emoji_combo.currentIndexChanged.connect(update_message_container)
            text.textChanged.connect(update_message_container)
            from_file.currentIndexChanged.connect(update_message_container)

    def resizeEvent(self, e):
        super().resizeEvent(e)

    def update_album_art(self, index):
        # –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É –≤ –ø—Ä–µ–≤—å—é –Ω–∞ —Ç—É –∏–∑ FlipView 
        global album_art
        if 0 <= index < len(image_paths):
            image_path = image_paths[index]
            album_art.setImage(image_path)
            album_art.setBorderRadius(16, 16, 16, 16)
            album_art.scaledToWidth(message_container.width() - 18) # –ø–æ—á–µ–º—É -18 ? +_—ë—Ç–æ –∫–æ—Å—Ç—ã–ª—å
            message_layout.update()


    def send_message_to_channel(self):
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ !–ü–†–û–í–ï–†–ö–£ –ü–†–û–í–ï–†–ö–£ –ü–†–û–í–ï–†–ö–£ –ü–†–û–í–ï–†–ö–£
        token = self.api_token_edit.text()
        channel_id = self.group_edit.text()
        message_text = message_label.text()

        if not token:
            self.log_to_widget("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω API —Ç–æ–∫–µ–Ω.", "red")
            return
        if not channel_id or not channel_id.startswith("@"):
            self.log_to_widget("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'.", "red")
            return

        current_image_index = self.flipView.currentIndex()
        photo_path = image_paths[current_image_index] if 0 <= current_image_index < len(image_paths) else None

        self.telegram_worker = TelegramWorker(token, channel_id, message_text, photo_path)
        self.telegram_worker.message_sent.connect(self.log_to_widget)
        self.telegram_worker.start()

    def log_to_widget(self, message, color="black"):
        #
        # –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ + —Ü–≤–µ—Ç
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω0.5
        # !–ø–æ–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ
        #
        if self.interface_created:
            self.log_text.setText(f'<font color="{color}">{message}</font>')
        else:
            print(message)  # –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ—Ç

    def dragEnterEvent(self, event):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ü–ï–†–ï–¢–ê–ö–°–ò–í–ê–ù–ò–Ø —Ç–æ–ª—å–∫–æ
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        # –Ω—É literally –¥—Ä–æ–ø –∏–≤–µ–Ω—Ç
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()

            file_paths = []
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if os.path.isfile(file_path):
                    file_paths.append(file_path)

            if file_paths:
                # !–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                if any(self.is_supported_file(file_path) for file_path in file_paths):
                    supported_files_found = extract_mdata(file_paths)

                    if supported_files_found:
                        if not self.interface_created:
                            self.create_main_interface()
                            self.interface_created = True

                        album_art.setImage() # –æ—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–Ω–µ—Ü –æ–±–ª–æ–∂–∫—É
                        self.update_flipview()
                        self.update_album_art(0)
                        update_content_comboboxes()
                        self.update_config_combobox()
                        self.load_last_config()
                    else:
                        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω1
                        if self.interface_created:
                            self.log_to_widget(
                                "–û—à–∏–±–∫–∞: –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.", "red")
                        else:
                            print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
                else:
                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω2
                    if self.interface_created:
                        self.log_to_widget(
                            "–û—à–∏–±–∫–∞: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.", "red")
                    else:
                        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
        else:
            event.ignore()

    def is_supported_file(self, file_path):
        # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª
        try:
            TinyTag.get(file_path)  # –ø—Ä–æ–±—É–µ—Ç –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ 
            return True
        except TinyTagException:
            return False

    def update_flipview(self):
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç FlipView —Å –Ω–æ–≤—ã–º–∏ –æ–±–ª–æ–∂–∫–∞–º–∏
        self.flipView.clear()
        self.flipView.addImages(image_paths)
        self.pager.setPageNumber(self.flipView.count())
        self.pager.setVisibleNumber(self.flipView.count())

        self.update_current_file_label(0)
        self.flipView.currentIndexChanged.connect(self.update_current_file_label)
        self.flipView.currentIndexChanged.connect(update_message_container)

        if len(image_paths) <= 1:
            self.flipView_container.hide()
            self.choose_cover_label.hide()
            self.current_file_label.hide()
        else:
            self.flipView_container.show()
            self.choose_cover_label.show()
            self.current_file_label.show()

        self.update_config_combobox()

    def update_current_file_label(self, index):
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        if 0 <= index < len(image_paths):
            file_path = image_paths[index]
            file_name = os.path.splitext(os.path.basename(file_path))[0]
            self.current_file_label.setText(
                f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {file_name}")

    def update_config_combobox(self):
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.config_combobox.clear()
        file_type_suffix = SINGLE_FILE_SUFFIX if len(
            extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) == 1 else MULTIPLE_FILES_SUFFIX
        config_files = [f for f in os.listdir(CONFIGS_DIR) if
                        f.endswith(file_type_suffix + CONFIG_EXTENSION)]
        self.config_combobox.addItems([f[:-len(file_type_suffix + CONFIG_EXTENSION)] for f in config_files])

    def create_new_config(self):
        # —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é((
        dialog = SaveConfigDialog(self)
        if dialog.exec():
            config_name = dialog.nameLineEdit.text()
            if config_name:
                save_config(config_name)
                self.update_config_combobox()

    def save_current_config(self):
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¢–ï–ö–£–©–£–Æ (–≤—ã–∑–≤–∞—Ç—å safeconfig)
        dialog = SaveConfigDialog(self)
        if dialog.exec():
            config_name = dialog.nameLineEdit.text()
            if config_name:
                save_config(config_name)
                self.update_config_combobox()

    def delete_selected_config(self):
        # —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é (—Ç–µ–∫—É—â—É—é) –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_name = self.config_combobox.currentText()
        if config_name:
            file_type_suffix = SINGLE_FILE_SUFFIX if len(
                extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) == 1 else MULTIPLE_FILES_SUFFIX
            config_path = os.path.join(CONFIGS_DIR, config_name + file_type_suffix + CONFIG_EXTENSION)
            if os.path.exists(config_path):
                os.remove(config_path)
                self.update_config_combobox()

    def load_selected_config(self):
        # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å—Ä–∞–∑—É –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞)
        config_name = self.config_combobox.currentText()
        if config_name:
            load_config(config_name)

    def load_last_config(self):
        # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∞–≤—Ç–æ)
        file_type_suffix = SINGLE_FILE_SUFFIX if len(
            extracted_metadata.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞', [])) == 1 else MULTIPLE_FILES_SUFFIX
        config_files = [f for f in os.listdir(CONFIGS_DIR) if
                        f.endswith(file_type_suffix + CONFIG_EXTENSION)]
        if config_files:
            last_config = sorted(config_files)[-1]
            self.config_combobox.setCurrentText(last_config[:-len(file_type_suffix + CONFIG_EXTENSION)])
            self.load_selected_config()


if __name__ == '__main__':
    QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough) #  # #   ###  ### #
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)                                             #### #   #  # # # #
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps)                                                #  # #   ###  #   #

    os.makedirs(CONFIGS_DIR, exist_ok=True) # –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤?

    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec())